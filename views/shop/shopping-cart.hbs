{{> header }}

<div class="row jumbotron">
   <h1 class="text-center">Order</h1><hr>
    <div class="col-md-6">
        <div style="font-size: 20px;">
            <strong>SubTotal: {{ cart.subTotalPrice }}</strong><br>
            <strong>Tax: {{ cart.totalTaxPrice }}</strong><br>
            <strong>Total: {{ cart.grandTotalPrice }}</strong><br>
        </div>
    </div>
        <div class="col-md-6">
            <label>Card Number</label>
            <div id="sq-card-number"></div>
            <label>CVV</label>
            <div id="sq-cvv"></div>
            <label>Expiration Date</label>
            <div id="sq-expiration-date"></div>
            <label>Postal Code</label>
            <div id="sq-postal-code"></div> 

            <form id="nonce-form" novalidate action="REPLACE_ME" method="post">
            <!--
              Whenever a nonce is generated, it's assigned as the value of this hidden
              input field.
            -->
            <input type="hidden" id="card-nonce" name="nonce">
            <!--
              Clicking this Submit button kicks off the process to generate a card nonce
              from the buyer's card information.
            -->
            <button type="submit" class="btn btn-primary" onclick="requestCardNonce(event)">Submit</button>
          </form>
        </div>

              

<!-- Checks if there's products -->
{{# if products }}
<div style="display: flex;" class="container">
    <div class="row">
            <ul class="list-group">
                {{# each products }}
                <div class="col-sm-6 col-md-6">
                <img class="img-responsive" style="height: 300px; width: 100%;" src="{{ this.item.imagePath }}">
                    <li class="list-group-item">
                        <span class="badge">{{ this.qty }}</span>
                        <strong>{{ this.item.title }} - {{ this.item.size}}</strong>
                        <span style="color: black; font-size: 18px;" class="label">${{ this.price }}</span>
                        <div class="btn-group">
                            <button style="color: black;" class="btn btn-default btn-xs dropdown-toggle" type="button" data-toggle="dropdown"> Modify <span class="caret"></span></button>
                            <ul class="dropdown-menu">
                                <li><a href="/reduce/{{this.item._id}}">Reduce by 1</a></li>
                                <li><a href="/increase/{{this.item._id}}">Increase by 1</a></li>
                                <li><a href="/remove/{{this.item._id}}">Remove All</a></li>
                            </ul>
                        </div>
                    </li>
                </div>
                {{/each}}
            </ul>
    </div> 
</div><hr>   
{{ else }}
    <div class="row">
        <div class="col-sm-6 col-md-6 col-md-offset-3 col-sm-offset-3">
            <h2>No Items in Cart</h2>
        </div>
    </div>
{{/if}}

</div>
<!-- Square secure payments -->
            <script>
               var applicationId = 'sq0idp-1Q_Lf3p4XFtPtoEe51WCKw'; 
               var paymentForm = new SqPaymentForm({
                applicationId: applicationId,
                inputClass: 'sq-input',
                inputStyles: [
                  {
                    fontSize: '15px'
                  }
                ],
                cardNumber: {
                  elementId: 'sq-card-number',
                  placeholder: '•••• •••• •••• ••••'
                },
                cvv: {
                  elementId: 'sq-cvv',
                  placeholder: 'CVV'
                },
                expirationDate: {
                  elementId: 'sq-expiration-date',
                  placeholder: 'MM/YY'
                },
                postalCode: {
                  elementId: 'sq-postal-code'
                },
                callbacks: {

                  // Called when the SqPaymentForm completes a request to generate a card
                  // nonce, even if the request failed because of an error.
                  cardNonceResponseReceived: function(errors, nonce, cardData) {
                    if (errors) {
                      console.log("Encountered errors:");

                      // This logs all errors encountered during nonce generation to the
                      // Javascript console.
                      errors.forEach(function(error) {
                        console.log('  ' + error.message);
                      });

                    // No errors occurred. Extract the card nonce.
                    } else {

                      // Delete this line and uncomment the lines below when you're ready
                      // to start submitting nonces to your server.
                      // alert('Nonce received: ' + nonce);


                      /*
                        These lines assign the generated card nonce to a hidden input
                        field, then submit that field to your server.
                        Uncomment them when you're ready to test out submitting nonces.

                        You'll also need to set the action attribute of the form element
                        at the bottom of this sample, to correspond to the URL you want to
                        submit the nonce to.
                      */
                      document.getElementById('card-nonce').value = nonce;
                      document.getElementById('nonce-form').submit();

                    }
                  },

                  unsupportedBrowserDetected: function() {
                    // Fill in this callback to alert buyers when their browser is not supported.
                  },

                  // Fill in these cases to respond to various events that can occur while a buyer is using the payment form.
                  inputEventReceived: function(inputEvent) {
                    switch (inputEvent.eventType) {
                      case 'focusClassAdded':
                        // Handle as desired
                        break;
                      case 'focusClassRemoved':
                        // Handle as desired
                        break;
                      case 'errorClassAdded':
                        // Handle as desired
                        break;
                      case 'errorClassRemoved':
                        // Handle as desired
                        break;
                      case 'cardBrandChanged':
                        // Handle as desired
                        break;
                      case 'postalCodeChanged':
                        // Handle as desired
                        break;
                    }
                  },

                  paymentFormLoaded: function() {
                    // Fill in this callback to perform actions after the payment form is
                    // done loading (such as setting the postal code field programmatically).
                    paymentForm.setPostalCode('94103');
                  }
                }
              });

              // This function is called when a buyer clicks the Submit button on the webpage
              // to charge their card.
              function requestCardNonce(event) {

                // This prevents the Submit button from submitting its associated form.
                // Instead, clicking the Submit button should tell the SqPaymentForm to generate a card nonce, which the next line does.
                event.preventDefault();

                paymentForm.requestCardNonce();
              }
            </script>

{{> footer }}
